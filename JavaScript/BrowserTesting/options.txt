- PhantomJS 1.9.8 http://phantomjs.org/
- Selenium https://github.com/SeleniumHQ/selenium/wiki/WebDriverJs
- CasperJS http://casperjs.org/
- DalekJS http://dalekjs.com/
- Zombie.js http://zombie.js.org/

- *UserTrace https://usetrace.com/


Evaluation plan:

- Browser support, how many browsers can be tested?
- Availability of high level API/rich API to code scenarios


*PhantomJS*

quite low level API, is supposed to be used by other tools rather than directly, no visibility at what stage the browser is
constant switching between the context of the browser and the current page, not clear in which context the current code is being executed, passing arguments to browser context is awkward

Overall: better not to use directly, unless a script is very simple, otherwise consider using other tools

*Selenium*

Selenium 1, homebrewed test automation toolkit developed at Thoughtworks, now replaced by WebDriver

https://github.com/SeleniumHQ/selenium umbrella project encapsulating a variety of tools and libraries enabling web browser automation using WebDriver spec

https://w3c.github.io/webdriver/webdriver-spec.html remote control interface that enables introspection and control of user agents

C#, Java, Python, Ruby, JavaScript

Common interface for all (major) browser technologies: Chromium, Firefox, Internet Explorer, Opera, Safari, PhantomJSDriver, HtmlUnitDriver

Possible to execute raw JavaScript => extensible

Standards based

Multiple browsers/platforms supported

Remote test execution is possible, can be used to setup testing in different browsers, SeleniumGrid

Several languages of choice available

Mature project

Rich API, for example, includes screenshot support driver.takeScreenshot()

JavaScript version uses Node.js, NPM modules are available (test libraries, utilities, etc.)

Supports creating custom testing DSL for a specific app

Uses real browser, then not suitable for performance testing well. Is not headless, but can be a plus for debugging scripts

Easier debugging as the browser executing the script is open, no need to capture screenshots to figure out what is happening

*Casper.JS*

Does not run out of the box in Windows, difficulties with installation and configuration, then spawns a separate process, is Python required in Windows?

'Fatal: [Errno 2] No such file or directory; did you install phantomjs?'

Higher level API compared with PhantomJS but quite custom

Nice methods to capture screen regions

Opinionated API, non-standard, for example, promises are not used, instead something promise-like and not quite complete

Flexible enough to allow the execution of arbitrary scripts (like Selenium and PhantomJS)

Low level JavaScript execution is mostly not needed, higher level API is available instead

Rich and complex API that includes assert support for testing

Run as a PhantomJS script

*Dalek.JS*

Has not been updated for a while, abandoned?
Requires a legacy PhantomJS version 1.9.8
More geared toward asserting simple things on well defined pages rather than modeling user interactions
Scenarios are declarative like with Selenium, are executed by a separate runner